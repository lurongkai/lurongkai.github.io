<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional Programing on 程序物语</title><link>https://lurongkai.github.io/tags/functional-programing/</link><description>Recent content in Functional Programing on 程序物语</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 24 Nov 2015 00:00:00 +0800</lastBuildDate><atom:link href="https://lurongkai.github.io/tags/functional-programing/index.xml" rel="self" type="application/rss+xml"/><item><title>函数式编程中的常用技巧</title><link>https://lurongkai.github.io/posts/2015/11/24/functional-programming-skills/</link><pubDate>Tue, 24 Nov 2015 00:00:00 +0800</pubDate><guid>https://lurongkai.github.io/posts/2015/11/24/functional-programming-skills/</guid><description>&lt;p>在 Clojure、Haskell、Python、Ruby 这些语言越来越流行的今天，我们撇开其在数学纯度性上的不同，单从它们都拥有&lt;code>一类函数&lt;/code>特性来讲，讨论函数式编程也显得很有意义。&lt;/p>
&lt;p>一类函数为函数式编程打下了基础，虽然这并不能表示可以完整发挥函数式编程的优势，但是如果能掌握一些基础的函数式编程技巧，那么仍将对并行编程、声明性编程以及测试等方面提供新的思路。&lt;/p>
&lt;p>很多开发者都有听过函数式编程，但更多是抱怨它太难，太碾压智商。的确，函数式编程中很多的概念理解起来都有一定的难度，最著名的莫过于[单子](&lt;a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)">https://en.wikipedia.org/wiki/Monad_(functional_programming)&lt;/a>，但是通过一定的学习和实践会发现，函数式编程能让你站在一个更高的角度思考问题，并在某种层面上提升效率甚至是性能。我们都知道飞机比汽车难开，但是开飞机却明显比开汽车快，高学习成本的东西解决的大部分是高回报的需求，这不敢说是定论，但从实践来看这句话基本也正确。&lt;/p></description></item></channel></rss>