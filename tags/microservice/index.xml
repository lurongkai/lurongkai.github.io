<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Microservice on 程序物语</title><link>https://lurongkai.github.io/tags/microservice/</link><description>Recent content in Microservice on 程序物语</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 26 Jul 2019 00:00:00 +0800</lastBuildDate><atom:link href="https://lurongkai.github.io/tags/microservice/index.xml" rel="self" type="application/rss+xml"/><item><title>如何优雅的在 Golang 中进行错误处理</title><link>https://lurongkai.github.io/posts/2019/07/handle-error-graceful-in-golang/</link><pubDate>Fri, 26 Jul 2019 00:00:00 +0800</pubDate><guid>https://lurongkai.github.io/posts/2019/07/handle-error-graceful-in-golang/</guid><description>&lt;p>如何优雅的在&lt;code>Golang&lt;/code>中进行错误处理？&lt;/p>
&lt;p>答案是：没有……（本文完）&lt;/p>
&lt;hr>
&lt;p>开个玩笑，&lt;code>Golang&lt;/code>中的错误处理方式一直是社区热烈讨论的话题，有力挺者，有抱怨者，但不论如何，自 2009 年&lt;code>Golang&lt;/code>正式发布以来，关于错误处理就一直是现在这种状况。&lt;/p>
&lt;p>随着&lt;code>Golang&lt;/code>愈加的火爆，原本是&lt;code>Java&lt;/code>、&lt;code>Node&lt;/code>、&lt;code>C#&lt;/code>等语言擅长的应用级开发领域也逐渐出现&lt;code>Golang&lt;/code>的身影。&lt;code>Golang&lt;/code>自身其实更加擅长做基础设施级开发，例如&lt;code>docker&lt;/code>，例如&lt;code>k8s&lt;/code>，再如&lt;code>etcd&lt;/code>，它友好的内存管理和简单到粗暴的语法（25 个关键字），特别适合过去&lt;code>C&lt;/code>和&lt;code>C++&lt;/code>这些语言所擅长的部分场景。我们有理由相信，&lt;code>Golang&lt;/code>下一个大的引爆点将也许会在&lt;code>IoT&lt;/code>上，因为它天然的适合。&lt;/p>
&lt;p>当一门语言火起来，就会出现各式各样的应用，于是&lt;code>MVC&lt;/code>框架有了，音视频处理库有了，各种数据库驱动有了，甚至服务框架也出现了，游戏、&lt;code>Machine Learning&lt;/code>都不在话下，还要啥自行车？组合一下做应用级开发妥妥的没毛病。&lt;/p>
&lt;p>但是，成也这 25 个关键字，败也这 25 个关键字，究其根本原因，都是因为它背后&lt;strong>简单&lt;/strong>的哲学。&lt;/p>
&lt;p>做应用级开发可不是那么简单的，这涉及到很多的细节处理，例如本文将要讨论的错误处理。如果只是写一个库，那么这个话题相对比较简单，因为与&lt;code>API&lt;/code>打交道的都是开发者，你只管开心的往外扔&lt;code>error&lt;/code>就好了，总会有倒霉的程序员在使用你的代码时&lt;strong>DEBUG&lt;/strong>到白头，最后，以最严谨的方式，小心使用你的库；可是有人出现的地方就会有幺蛾子，一个常见的误区就是将&lt;strong>业务错误&lt;/strong>、&lt;strong>运行时错误&lt;/strong>、&lt;strong>程序错误&lt;/strong>一股脑的当成相同的&lt;code>error&lt;/code>来处理。&lt;/p></description></item></channel></rss>