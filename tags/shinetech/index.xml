<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shinetech on 程序物语</title><link>https://lurongkai.github.io/tags/shinetech/</link><description>Recent content in Shinetech on 程序物语</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 03 Aug 2020 00:00:00 +0800</lastBuildDate><atom:link href="https://lurongkai.github.io/tags/shinetech/index.xml" rel="self" type="application/rss+xml"/><item><title>我与盛安德的 10 年</title><link>https://lurongkai.github.io/posts/2020/08/03/shinetech-decade/</link><pubDate>Mon, 03 Aug 2020 00:00:00 +0800</pubDate><guid>https://lurongkai.github.io/posts/2020/08/03/shinetech-decade/</guid><description>引子 2011 年的一个上午，在工作一个星期后，我离开了毕业后第一份工作。然后用当周的薪水买了一台显示器和十几本书，决定闭关修炼一个月。后来的事实证明，显示器只有在玩游戏和刷剧时才能发挥最大的功效，而书虽然会给搬家增加负担，但好歹是不错的投资。
当时的事业部负责人才签字时，流露出一种“刚毕业的小白竟然敢如此造作”的狐疑表情，问我为啥离开？我说不适合公司文化。
事实上，小组里的人都在加班，但即便自己没有任何的开发任务，却被要求“陪着”加班……加班费正常给、管餐、打车报销，除了不能上网（物理上）、USB 全封、禁止带书和 kindle……能做的只有玩手机，以及玩没电后睡觉，迷之文化。
我决定，下一份工作一定得找个文化上比较 open 的公司。
初识 在昏天黑地的刷了 N 部剧后，我决定开始找找新机会。刚好在博客园上注意到盛安德在天津招 5 年经验的高级软件工程师，抱着“我脸皮厚我怕谁”的态度投了唯一一份简历，没想到就收到了面试邀约。
整个过程就很奇妙，和@Russel 聊了两个多小时，已经想不起聊了些啥，反正就知道河西分公司刚成立，办公室新租的，桌子是刚买的，人呢就@Russel 自己……
于是你哈哈哈我哈哈哈，聊的很开心的一周后，我成为了 Shinetech 天津河西分公司的 03 号员工，02 号是@温融晶。
小项目 一切从最简单的项目开始。我们做了几个规模相对小一些的小项目，最终都成功交付。当然了，对于我而言，最为重要的是，终于弄清楚了公司的主营业务是什么，以及管理架构是什么样的……
这非常奇妙，就是一切的关注点都在项目和交付上。我当时最大的困惑就是，这公司到底有多少人……真的不是皮包公司吗？
陆续的，有更多的小伙伴加入了进来，我同校的学长@Nick，和我简直不要太对脾气@Jaime（我们经常起个头就知道接下来要说什么、优缺点是什么）……这下放心了，应该不是骗子公司:-P。他们加入后，技术氛围就更加浓烈了。后来@Vivian 也和我们在同一个办公室工作，大家有说有笑，气氛非常好。
说到这里，还有点想@Jaime 了。
Ralph Lauren 12 年的时候，@Russel、@温融晶和我三个人前往美国 Texas，着手 Ralph Lauren 的项目，这是我加入 Shinetech 后真正意义上的大项目，我们在 Austin 停留了近两个月了解和参与业务，为接下来的两年工作打下了基础。
那一段日子可谓是异常的潇洒，白天忙碌，晚上看看资料或者压压马路，到了周六日就在一起打打游戏，Diablo II、CS、Red Alert 全部复习了一遍。不工作的时候，最费脑子的就是去哪家餐馆吃饭的问题。期间去当地的景点玩，进去后才发现是类似于我们爱国主义教育基地的地方，回忆起来也是颇为有趣。
回国后项目正式开始，@Russel 在项目上投入了极大的精力，正是他的不懈努力，这个项目逐渐成为公司的明星项目。一年后，客户来上海审查我们的项目，我被任命为这个项目的 Technical Leader，这是在技术能力上得到了认可，非常开心。
两年后，我想要换换思路，决定暂时先别这个项目，同一时间，@Robert 加入了公司，是个去吃自助大餐要先来碗白饭的神人，非常有意思。
几年的工作很充实，但是却几乎没有加班过。其实实践不加班是很难的，但是 Shinetech 在这一点上践行的很彻底，值得尊敬。
(Ralph Lauren 团队在上海)
看看世界 15 年的时候，生活和工作趋于过分的平静，我感到这是个危险的信号，所以我决定给自己点时间去外面的世界看看。其实我一直很感谢@Russel 的赏识，他建议我去北上广历练一番，于是还是老规矩，休息一个月，然后在北京投了两个相对高阶的职位。
都是移动互联网公司，一家 B 轮，一家天使轮，考虑了一下去了天使轮的公司。倒不是因为给期权，而是感觉可以做更多的事情。
传统软件公司的思路和互联网公司的思路真是完全不同，前者做事稳妥但是缺乏创新和敏捷（虽然口号是敏捷），后者行事快速果断但是大多只追求了速度，基础设施薄弱。
这一年积累和认识了颇多，更多的是包容。没有完美的方案，只有在成本范围内适合的方案，这也是最为刻骨铭心的架构准则。
我带来的是对整个技术团队基础设施和技术栈的升级，同时重构协作文化（没错，导入了敏捷开发）。而回馈给我的，是互联网公司更加自驱动的做事文化，这在传统软件公司是极度欠缺的。</description></item><item><title>介绍 Shinetech Open Community</title><link>https://lurongkai.github.io/posts/2020/04/01/soc-intro/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0800</pubDate><guid>https://lurongkai.github.io/posts/2020/04/01/soc-intro/</guid><description>Shinetech Open Community（以下简称SOC）是盛安德公司内自发组织的一个松散组织团体，吸纳和整合公司范围内优质资源，包括但不仅限于研发工程师及业务分析、工程管理等各方面的明星同事，力图打造新的 Shinetech 子品牌。
自成立 3 个月以来，SOC 以极其迅速的姿态组织和发起了多项品牌衍伸项目，得到了公司内的良好反馈，我们坚信做这件事情所带来的不菲的价值，也定会坚持把 SOC 发展下去。
为什么成立 SOC SOC 的萌芽是在天津交付中心，一次闲聊时我们一致认为，Shinetech 值得拥有更好的工程师工具，以及面向整个开发者社区更好的技术形象。于是，我们决定组织成立一个松散的团队，用自己的力量改善这些状况。
SOC 起初并没有明确的目标的方向，除了Open Source这个选项之外，能做的似乎非常有限，连正式的组织名也没有确定。现在我们意识到这也是任何想“搞点事情”的组织所面对的共同疑问。于是，我们召开了一次非正式的线下聚会，希望通过有效的头脑风暴，确定组织的发展方向和计划。
时值经理正好开完 3 月份的全员例会，提到了一些ORK的理念，我们也针对性的了解了一些ORK的优劣势，认为这可能是值得在组织内采用的一套目标管理工具。
在通过广泛的讨论之后，我们确立了组织运作的形式的方向，成立了Shinetech Open Community，并决定在形象建设、宣传推广、开源项目、工具和分享这四个方向上努力。
SOC 的目标和使命 SOC 的初期ORK非常简单和明确，只有 4 个大O，下面分别有着不同的KR
以开放合作的姿态建立 shinetech 新形象 用富有成效的软件工程实践提升工程师的基础能力 为工程师提供更为实用的研发工具和工作平台 提升个人品牌价值，从而互相提升 Shinetech 品牌价值 我们阶段性的目标，是希望通过不断的努力，将 Shinetech 这个品牌，拓展为另一个从工程师文化层面能够足够吸引优秀人才的平台，让更多的人不仅仅是通过 Shinetech 的交付能力而关注公司。同时，通过 SOC 一系列的产出，让公司内的同事能够受益，进而提升个人品牌价值，让 Shinetech 的品牌价值更具竞争力。
SOC 带着愿景成立，通过三个月的运作，我们相信下面的 slogan 足以涵盖 SOC 正在践行的使命:
Be Share Be Open Be Shinetech
SOC 的工作方式 SOC 通过自管理的方式运作，我们自己戏称为“一个敏捷并自我驱动的松散管理的非正式组织”。虽然松散，但是我们仍然有一套基本的工作方式。
我们每周会定期的召开weekly meeting，回顾过去一周所做的工作，并制定本周的工作安排，也会讨论未来将要展开的计划。由于 SOC 成员本身有可能在项目中，所以会议不是强制的，这也是“松散”一词的由来。</description></item><item><title>软件与设计</title><link>https://lurongkai.github.io/posts/2016/01/17/software-and-design/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0800</pubDate><guid>https://lurongkai.github.io/posts/2016/01/17/software-and-design/</guid><description>我曾经面试过一个有10年工作经验的“.NET架构师”，也就是说比我年长很多的前辈，当时还挺不安的，但是当我拿到HR转给我的简历时，心里却犯起了嘀咕：这简历，能不能做的整齐一些？至少，每个段落的文本可不可以对齐？难道……
顺利的按约定好的时间见面，聊起来发现原来还是半个老乡。我并没有准备什么面试的内容，而是对照简历和他细聊，因为我相信，优秀的工程师拥有的是解决问题的能力，所以我愿意按对方了解的东西去发现，或者说在中途放置一个小路障看对方如何解决。
当看到有丰富的优化经验时，我了解到之前的项目做了很多静态化的工作，于是我开始下绊子：为什么要考虑静态化？回答还是中规中矩的，比如访问慢啦、经常503啦。我灵机一动：你们是如何发现这个问题的？大哥抬头一脸疑惑的打量着我这个小后生：因为服务器上硬盘灯狂闪啊！当时我就草泥马奔腾了：你们都特么不用Profiler么……
我于是放下了他“架构师”的头衔，开始问他作为一个.NET工程师最基础的：什么是Lambda表达式？和委托有什么不同？（其实完全就是一回事，我在故弄玄虚），大哥又开始迷茫了，内心好像在说：草泥马C#还有这东西？于是礼貌的告诉他会有人通知他面试结果的。之后大哥以半老乡的身份曾打电话给我跟我说：你要不帮我再说说好话？我说好的……
当年的这场面试在我幼小的心灵留下了阴影，我突然发现这行业里的水还是深的。而随着时间的流逝面试了更多的人后，我习惯了……
我对软件开发是抱有一种尊敬的态度的，它应该是美的、理性的。和你一起战斗的同事可以有鲜明的个性，也可以以任何邋遢的形像出现，但是终归到底，对待自己写出的东西要起码抱有一丝负责的态度。允许写出的软件不漂亮，但是既不漂亮也不想办法改善就是你的不对了，盖楼的偷工减料害的是人命，软件偷梁换柱虽然不致命，但是这事儿谋财啊亲！！
什么是态度？或者说什么是优秀工程师的态度？
对待软件的态度 软件是要给人用的，是一种服务产品，所以我们从事的是服务行业。假如我们是厨子，做出的菜里有头发这事儿能忍吗？请摸着你的胸想想……
有点弄不太懂的是，有一大批工程师正在仰天长叹：“小bug不用修、小细节不用在意，只要产品能上线！”，真特么闹心，工程师操产品经理的心，产品经理操投资人的心。赚的卖白菜的钱操的卖白粉心，长此下去要亡国的呀！（友情提示，操字请读一声）
能不能认真点？能不能走点心？小细节问题还能饶一条小命，bug简直应该鞭尸，为什么有bug却不改？都不写测试吗？
每个工程师可以不完美也允许不完美，可以有缺陷，但是得有态度，这种态度就是对不完美的不断修正，是情怀。一个面对不完美，却完全不动容的工程师那绝B是个好销售。如果连工程师们都不去修正不完美，那这工程或项目可以洗洗睡了。
作为工程师，编写代码时要时刻提醒自己：我打算让全世界的工程师来看我的代码！这样一来，你便不好意思使用过多的Magic Number，不会在一个方法内写一坨屎一般的嵌套if，因为这样很害羞，有种扒光了被弹小鸡鸡的耻辱感！随着对代码下手越来越慎重，质量也会逐步提高，当你老了的时候也不会拉着孙子的手忏悔过去：爷爷当年犯过大错，写了很多超过1000行代码的函数……
我甚至有时候觉得，人就是得被收拾才行，Linus在邮件列表狂喷时，我每次都是心里叫好，然后对别人说：Linus说话还是太冲动，Too Naive。每当团队内的成员有写出翔码时，我都是以一种衣冠禽兽的面目出现：xx啊，这段代码我看着有些吃力，应该有更好的办法，你能想办法重构一下吗？然后自己默默念《清心咒》10遍以克制体内的洪荒之力爆发……
软件，应该视为脑力的结晶，工程师们应该不希望别人说这结晶长的像翔吧？要知道这可是脑力的结晶……
对待开发的态度 软件是复杂的，编写质量优秀的软件不是件容易的事儿。现代的软件或者叫应用已经越来越复杂和庞大，单枪匹马撸出个软件的事儿也越来越不现实，经常需要很多人共同的参与才能将事情做好。
不谈浮躁的环境，单从开发本身来讲，这就是一件严肃的事儿。有的工程师在遇到问题时，马上google解决方案然后copy/paste过来以期望马上可以使用，没有思考没有考虑是否会对现有的设计造成影响。不断的尝试google不断的重复，心塞的工程师们总结出这门语言/平台不适合做这件事，还是原来用过的东西好……之后论坛掀起又一波语言圣战。
对待开发，究竟是什么态度？
经常有工程师抱怨：
项目进度很紧，根本来不及停下来反思 copy/paste能马上解决的事儿，干嘛要提取出共性的东西 我先临时对付一下，回头再来改 墨菲法则告诉我们，越担心的事情就越会发生，如果不一步一步的踏实前进，将来清理技术债务的成本将远大于投机取巧带来的短期收益。我大中华也有类似的谚语：偷鸡不成把蚀一把米。
不要有技术债务，不要抱有幻想，尽可能的将自己在做的事情做到极致，不给其它同事带来困扰，冷静的思考，这是开发应有的态度。
对待技术的态度 不管你承认与否，每门技术或语言的表达能力都是相同的，所以不要幻想我在使用的东西别的技术做不了，大家都是图灵完备的。这同时告诉我们，做.NET的不要看不起做Java的，做Java的不要看不起搞Ruby的，各有所长，以诚相待。
但是还有一个重要事实，就是每种技术侧重的场景是不一样的，SQL侧重数据的查询，RoR侧重快速开发，Node侧重高IO场景……大家都有自己的看家本领，没必要非要用一种技术统一天下，这不现实。
几乎所有的技术社区，每过一段时间就会出现唱衰某种技术的帖子，绝大部分并不是从技术本身分析，而是从自身出发，发现自己使用的某项技术赚钱太少，吵吵着要转型。何必呢，用筷子的没必要看不起用刀叉的，况且自己筷子也没怎么用好。搞技术嘛，就不要像娱乐圈那么乱了，天天撕有什么意思呢，有本事出去打一架……
面对层出不穷的新技术，我觉得一个优秀的工程师并不会排斥了解它们，而且一个有能力的工程师能够结合自己的经验快速的学习，当作自己的知识储备。从我个人角度来看，应该有三个视角用来审视一门新技术：
What: 这门技术是什么？它用来解决什么样的问题？
Why: 这门技术为什么会出现？在它出现以前是什么解决的？它能更好的解决吗？
When: 这门技术在什么状态（上下文）下发挥作用？有什么限制条件？ 举个例子，对TypeScript的审视：
What: 是javascript的超集，并添加了一些关键特性用于支持大规模的javascript应用开发，用来解决在应用规模变大时，javascript组织应用程序变的困难的痛点。
Why: javascript并没有包、类的概念，所以难于组织大规模应用，在这之前有CoffeeScript，或者纯靠人力。TypeScript更友好一些是因为它并非像CoffeeScript创造一门新语言，而是在现有javascript的基础上无痛的升级，并且编译成javascript来用，所以兼容性是完全保障的。
When: 几乎所有的javascript开发都可以使用TypeScript来做，借助静态类型系统甚至可以提供智能提示以提高开发效率，并同时避免错误拼写。限制条件是，如果想要获得完整的静态类型系统，需要针对现有的库编写definition文件，然而最怀的情况也就是在编写普通的javascript。 冷静的对待每一门技术，让他服务于人，而不要将事情反过来，这是对技术应有的态度。
对待设计的态度 没有设计的软件是可耻的。这里的设计是指软件本身的设计、结构，并不涉及UI/UX。
有非常多的优秀书籍在讨论如何设计软件，但似乎读的人很少。冲动的工程师们读过Gof23就想在每个项目里挨个试一遍，说用过MVC却在Controller里写所有的业务逻辑，一说架构就是三层架构……这个路子有点太飘逸，打法不对。
我认为的设计有两方面：架构设计和代码设计。
架构设计就是指在高层上对一个软件工作方式的约定，比如服务层设计、读写分离等，这些是架构设计，往往是架构师们做出的决策。
代码设计是工程师们更多接触到的，比如一个方法/类的实现，一组API的设计等等，与每个人日常相关。
我见到过很多遗留代码里N多的静态类和伪静态类（意思是，虽然不是静态类，但是用起来和静态类没什么不同），最牛逼的是有个大哥一进项目先不问项目的情况，而是直接拷贝了一个Helper工程（对，是上百个源文件，不是dll）并提交，里面五花八门什么都有，感觉能创造出一个宇宙的那种。还有的工程师一进项目第一件事，先让Presentation工程引用Persistence工程，说什么访问数据还得从服务层绕一下，不方便……
我一直孜孜不倦的在内部普及一些基础的设计概念，讲什么是SoC、LSP、SRP、OCP、DIP、ISP，什么是DI，有什么优点以及为什么等等，效果还是很明显的，至少在面对需求的变化时，大家发现好的设计可以灵活很多，没以前那么痛苦了。</description></item></channel></rss>